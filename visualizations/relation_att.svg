<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">
    <foreignObject width="100" height="100">
        <html>
        <head>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.16.1/vis.css" type="text/css" />
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.16.1/vis-network.min.js"> </script>
        <center>
        <h3>Association between relation and attribute objects</h3>
        </center>

        <!-- <link rel="stylesheet" href="../node_modules/vis/dist/vis.min.css" type="text/css" />
        <script type="text/javascript" src="../node_modules/vis/dist/vis.js"> </script>-->

        <style type="text/css">

                body{
                    width: 500px;
                    height: 300px;
                }
                #mynetwork {
                    width: 100%;
                    height: 90%;
                    background-color: #ffffff;
                    border: 1px solid lightgray;
                    position: relative;
                    float: left;
                    margin: 10px;

                }

                

                

                
        </style>

        </head>

        <body>
        <div id = "mynetwork"></div>


        <script type="text/javascript">

            // initialize global variables.
            var edges;
            var nodes;
            var network; 
            var container;
            var options, data;

            
            // This method is responsible for drawing the graph, returns the drawn network
            function drawGraph() {
                var container = document.getElementById('mynetwork');
                
                

                // parsing and collecting nodes and edges from the python
                nodes = new vis.DataSet([{"borderWidthSelected": "3", "color": "#95C0F9", "group": 2, "id": "inputValidation", "label": "inputValidation", "shape": "box", "size": 20, "title": "inputValidation. Profile: Mandatory."}, {"color": "#FCF3CF", "group": 2, "id": "sequence_input_att", "label": "sequence_input_att", "shape": "box", "title": "[ontoexpline.sequence_input_att]"}, {"color": "#FCF3CF", "group": 2, "id": "attribute_2", "label": "attribute_2", "shape": "box", "title": "[ontoexpline.attribute_2]"}]);
                edges = new vis.DataSet([{"arrows": "to", "color": "black", "from": "inputValidation", "label": "composedBy", "shape": "square", "to": "sequence_input_att", "weight": 50}, {"arrows": "to", "color": "black", "from": "inputValidation", "label": "composedBy", "shape": "square", "to": "attribute_2", "weight": 50}]);

                // adding nodes and edges to the graph
                data = {nodes: nodes, edges: edges};

                var options = {
            "configure": {
                "enabled": false
            },
            "edges": {
                "color": {
                    "inherit": true
                },
                "smooth": {
                    "enabled": false,
                    "type": "continuous"
                }
            },
            "interaction": {
                "dragNodes": true,
                "hideEdgesOnDrag": false,
                "hideNodesOnDrag": false
            },
            "layout": {
                "hierarchical": {
                    "blockShifting": true,
                    "edgeMinimization": true,
                    "enabled": true,
                    "levelSeparation": 150,
                    "parentCentralization": true,
                    "sortMethod": "hubsize",
                    "treeSpacing": 200
                },
                "improvedLayout": true,
                "randomSeed": 0
            },
            "physics": {
                "enabled": true,
                "stabilization": {
                    "enabled": true,
                    "fit": true,
                    "iterations": 1000,
                    "onlyDynamicEdges": false,
                    "updateInterval": 50
                }
            }
        };
                
                

                

                network = new vis.Network(container, data, options);
            
                


                

                return network;

            }

            drawGraph();

        </script>
        <center>
            <h4>The instance inputRelation is composed by two attribute instances: sequence_input_att and attribute_2.</h4>
        </center>


        </body>
        </html>
    </foreignObject>
</svg>